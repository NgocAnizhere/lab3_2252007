
ex1lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000058  080030f4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080030f4  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ac1  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c24  00000000  00000000  00029b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f2a  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2b0  00000000  00000000  00043a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082629  00000000  00000000  0004fd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d234b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  000d23a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003054 	.word	0x08003054

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003054 	.word	0x08003054

0800014c <isButton1Pressed>:
int KeyReg2 = NORMAL_STATE;

int KeyReg3 = NORMAL_STATE;
int TimerForKeyPress = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButton2Pressed>:
int KeyReg2_2 = NORMAL_STATE;

int KeyReg3_2 = NORMAL_STATE;
int TimerForKeyPress_2 = 200;

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButton3Pressed>:
int KeyReg2_3 = NORMAL_STATE;

int KeyReg3_3 = NORMAL_STATE;
int TimerForKeyPress_3 = 200;

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess>:
//Button3


void subKeyProcess(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074

080001d0 <subKeyProcess_2>:

void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000078 	.word	0x20000078

080001e8 <subKeyProcess_3>:

void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000204:	4b5c      	ldr	r3, [pc, #368]	; (8000378 <getKeyInput+0x178>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a5c      	ldr	r2, [pc, #368]	; (800037c <getKeyInput+0x17c>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b5c      	ldr	r3, [pc, #368]	; (8000380 <getKeyInput+0x180>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a59      	ldr	r2, [pc, #356]	; (8000378 <getKeyInput+0x178>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	485a      	ldr	r0, [pc, #360]	; (8000384 <getKeyInput+0x184>)
 800021a:	f001 feef 	bl	8001ffc <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b57      	ldr	r3, [pc, #348]	; (8000380 <getKeyInput+0x180>)
 8000224:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000226:	4b55      	ldr	r3, [pc, #340]	; (800037c <getKeyInput+0x17c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b53      	ldr	r3, [pc, #332]	; (8000378 <getKeyInput+0x178>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput+0x7e>
 8000232:	4b51      	ldr	r3, [pc, #324]	; (8000378 <getKeyInput+0x178>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b52      	ldr	r3, [pc, #328]	; (8000380 <getKeyInput+0x180>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 800023e:	4b52      	ldr	r3, [pc, #328]	; (8000388 <getKeyInput+0x188>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b4f      	ldr	r3, [pc, #316]	; (8000380 <getKeyInput+0x180>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput+0x66>
            KeyReg3 = KeyReg2;
 800024a:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <getKeyInput+0x180>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <getKeyInput+0x188>)
 8000250:	6013      	str	r3, [r2, #0]
            if(KeyReg2 == PRESSED_STATE){
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <getKeyInput+0x180>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput+0x7e>
            	//TODO
            	subKeyProcess();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess>
            	TimerForKeyPress = 200;
 800025e:	4b4b      	ldr	r3, [pc, #300]	; (800038c <getKeyInput+0x18c>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e00b      	b.n	800027e <getKeyInput+0x7e>
            }
		}else{
			TimerForKeyPress--;
 8000266:	4b49      	ldr	r3, [pc, #292]	; (800038c <getKeyInput+0x18c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a47      	ldr	r2, [pc, #284]	; (800038c <getKeyInput+0x18c>)
 800026e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000270:	4b46      	ldr	r3, [pc, #280]	; (800038c <getKeyInput+0x18c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput+0x7e>
				//TODO
				KeyReg3 = NORMAL_STATE;
 8000278:	4b43      	ldr	r3, [pc, #268]	; (8000388 <getKeyInput+0x188>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	KeyReg0_2 = KeyReg1_2;
 800027e:	4b44      	ldr	r3, [pc, #272]	; (8000390 <getKeyInput+0x190>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a44      	ldr	r2, [pc, #272]	; (8000394 <getKeyInput+0x194>)
 8000284:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000286:	4b44      	ldr	r3, [pc, #272]	; (8000398 <getKeyInput+0x198>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a41      	ldr	r2, [pc, #260]	; (8000390 <getKeyInput+0x190>)
 800028c:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	483c      	ldr	r0, [pc, #240]	; (8000384 <getKeyInput+0x184>)
 8000294:	f001 feb2 	bl	8001ffc <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <getKeyInput+0x198>)
 800029e:	601a      	str	r2, [r3, #0]
	if((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)){
 80002a0:	4b3c      	ldr	r3, [pc, #240]	; (8000394 <getKeyInput+0x194>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <getKeyInput+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d125      	bne.n	80002f8 <getKeyInput+0xf8>
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <getKeyInput+0x190>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b39      	ldr	r3, [pc, #228]	; (8000398 <getKeyInput+0x198>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d11f      	bne.n	80002f8 <getKeyInput+0xf8>
		if(KeyReg3_2 != KeyReg2_2){
 80002b8:	4b38      	ldr	r3, [pc, #224]	; (800039c <getKeyInput+0x19c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b36      	ldr	r3, [pc, #216]	; (8000398 <getKeyInput+0x198>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d00d      	beq.n	80002e0 <getKeyInput+0xe0>
            KeyReg3_2 = KeyReg2_2;
 80002c4:	4b34      	ldr	r3, [pc, #208]	; (8000398 <getKeyInput+0x198>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a34      	ldr	r2, [pc, #208]	; (800039c <getKeyInput+0x19c>)
 80002ca:	6013      	str	r3, [r2, #0]
            if(KeyReg2_2 == PRESSED_STATE){
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <getKeyInput+0x198>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d111      	bne.n	80002f8 <getKeyInput+0xf8>
            	//TODO
            	subKeyProcess_2();
 80002d4:	f7ff ff7c 	bl	80001d0 <subKeyProcess_2>
            	TimerForKeyPress_2 = 200;
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <getKeyInput+0x1a0>)
 80002da:	22c8      	movs	r2, #200	; 0xc8
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e00b      	b.n	80002f8 <getKeyInput+0xf8>
            }
		}else{
			TimerForKeyPress_2--;
 80002e0:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <getKeyInput+0x1a0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a2e      	ldr	r2, [pc, #184]	; (80003a0 <getKeyInput+0x1a0>)
 80002e8:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_2 == 0){
 80002ea:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <getKeyInput+0x1a0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d102      	bne.n	80002f8 <getKeyInput+0xf8>
				//TODO
				KeyReg3_2 = NORMAL_STATE;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <getKeyInput+0x19c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
			}
		}
	}

	KeyReg0_3 = KeyReg1_3;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <getKeyInput+0x1a4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <getKeyInput+0x1a8>)
 80002fe:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <getKeyInput+0x1ac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <getKeyInput+0x1a4>)
 8000306:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	481d      	ldr	r0, [pc, #116]	; (8000384 <getKeyInput+0x184>)
 800030e:	f001 fe75 	bl	8001ffc <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <getKeyInput+0x1ac>)
 8000318:	601a      	str	r2, [r3, #0]
	if((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)){
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <getKeyInput+0x1a8>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <getKeyInput+0x1a4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d125      	bne.n	8000372 <getKeyInput+0x172>
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a4>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <getKeyInput+0x1ac>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d11f      	bne.n	8000372 <getKeyInput+0x172>
		if(KeyReg3_3 != KeyReg2_3){
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <getKeyInput+0x1b0>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <getKeyInput+0x1ac>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d00d      	beq.n	800035a <getKeyInput+0x15a>
            KeyReg3_3 = KeyReg2_3;
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <getKeyInput+0x1ac>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <getKeyInput+0x1b0>)
 8000344:	6013      	str	r3, [r2, #0]
            if(KeyReg2_3 == PRESSED_STATE){
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <getKeyInput+0x1ac>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <getKeyInput+0x172>
            	//TODO
            	subKeyProcess_3();
 800034e:	f7ff ff4b 	bl	80001e8 <subKeyProcess_3>
            	TimerForKeyPress_3 = 200;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <getKeyInput+0x1b4>)
 8000354:	22c8      	movs	r2, #200	; 0xc8
 8000356:	601a      	str	r2, [r3, #0]
				KeyReg3_3 = NORMAL_STATE;
			}
		}
	}

}
 8000358:	e00b      	b.n	8000372 <getKeyInput+0x172>
			TimerForKeyPress_3--;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <getKeyInput+0x1b4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3b01      	subs	r3, #1
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <getKeyInput+0x1b4>)
 8000362:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_3 == 0){
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <getKeyInput+0x1b4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <getKeyInput+0x172>
				KeyReg3_3 = NORMAL_STATE;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <getKeyInput+0x1b0>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000
 8000380:	20000008 	.word	0x20000008
 8000384:	40011000 	.word	0x40011000
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000010 	.word	0x20000010
 8000390:	20000018 	.word	0x20000018
 8000394:	20000014 	.word	0x20000014
 8000398:	2000001c 	.word	0x2000001c
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000024 	.word	0x20000024
 80003a4:	2000002c 	.word	0x2000002c
 80003a8:	20000028 	.word	0x20000028
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	20000038 	.word	0x20000038

080003b8 <fsm_automatic_run>:


const int MAX_LED1 = 4;
int index_led1 = 0;

void fsm_automatic_run(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch(status){
 80003bc:	4b84      	ldr	r3, [pc, #528]	; (80005d0 <fsm_automatic_run+0x218>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	f200 8324 	bhi.w	8000a10 <fsm_automatic_run+0x658>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <fsm_automatic_run+0x18>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080003e5 	.word	0x080003e5
 80003d4:	08000495 	.word	0x08000495
 80003d8:	08000619 	.word	0x08000619
 80003dc:	0800075b 	.word	0x0800075b
 80003e0:	080008d1 	.word	0x080008d1
	case INIT:
		//TODO
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	487a      	ldr	r0, [pc, #488]	; (80005d4 <fsm_automatic_run+0x21c>)
 80003ea:	f001 fe1e 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	4878      	ldr	r0, [pc, #480]	; (80005d4 <fsm_automatic_run+0x21c>)
 80003f4:	f001 fe19 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2140      	movs	r1, #64	; 0x40
 80003fc:	4875      	ldr	r0, [pc, #468]	; (80005d4 <fsm_automatic_run+0x21c>)
 80003fe:	f001 fe14 	bl	800202a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	4872      	ldr	r0, [pc, #456]	; (80005d4 <fsm_automatic_run+0x21c>)
 800040a:	f001 fe0e 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000414:	486f      	ldr	r0, [pc, #444]	; (80005d4 <fsm_automatic_run+0x21c>)
 8000416:	f001 fe08 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000420:	486c      	ldr	r0, [pc, #432]	; (80005d4 <fsm_automatic_run+0x21c>)
 8000422:	f001 fe02 	bl	800202a <HAL_GPIO_WritePin>



		status = State1;
 8000426:	4b6a      	ldr	r3, [pc, #424]	; (80005d0 <fsm_automatic_run+0x218>)
 8000428:	2202      	movs	r2, #2
 800042a:	601a      	str	r2, [r3, #0]
		setTimer1(greenTime);
 800042c:	4b6a      	ldr	r3, [pc, #424]	; (80005d8 <fsm_automatic_run+0x220>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f001 f9ef 	bl	8001814 <setTimer1>
		setTimer2(50);
 8000436:	2032      	movs	r0, #50	; 0x32
 8000438:	f001 fa2e 	bl	8001898 <setTimer2>
		tmpTimeRed = redTime;
 800043c:	4b67      	ldr	r3, [pc, #412]	; (80005dc <fsm_automatic_run+0x224>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a67      	ldr	r2, [pc, #412]	; (80005e0 <fsm_automatic_run+0x228>)
 8000442:	6013      	str	r3, [r2, #0]
		tmpTimeYellow = yellowTime;
 8000444:	4b67      	ldr	r3, [pc, #412]	; (80005e4 <fsm_automatic_run+0x22c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a67      	ldr	r2, [pc, #412]	; (80005e8 <fsm_automatic_run+0x230>)
 800044a:	6013      	str	r3, [r2, #0]
		tmpTimeGreen = greenTime;
 800044c:	4b62      	ldr	r3, [pc, #392]	; (80005d8 <fsm_automatic_run+0x220>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a66      	ldr	r2, [pc, #408]	; (80005ec <fsm_automatic_run+0x234>)
 8000452:	6013      	str	r3, [r2, #0]
		tmpTimeRed1 = redTime;
 8000454:	4b61      	ldr	r3, [pc, #388]	; (80005dc <fsm_automatic_run+0x224>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a65      	ldr	r2, [pc, #404]	; (80005f0 <fsm_automatic_run+0x238>)
 800045a:	6013      	str	r3, [r2, #0]
		tmpTimeYellow1 = yellowTime;
 800045c:	4b61      	ldr	r3, [pc, #388]	; (80005e4 <fsm_automatic_run+0x22c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a64      	ldr	r2, [pc, #400]	; (80005f4 <fsm_automatic_run+0x23c>)
 8000462:	6013      	str	r3, [r2, #0]
		tmpTimeGreen1 = greenTime;
 8000464:	4b5c      	ldr	r3, [pc, #368]	; (80005d8 <fsm_automatic_run+0x220>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a63      	ldr	r2, [pc, #396]	; (80005f8 <fsm_automatic_run+0x240>)
 800046a:	6013      	str	r3, [r2, #0]

		if(redTime !=  greenTime + yellowTime){
 800046c:	4b5a      	ldr	r3, [pc, #360]	; (80005d8 <fsm_automatic_run+0x220>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b5c      	ldr	r3, [pc, #368]	; (80005e4 <fsm_automatic_run+0x22c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	441a      	add	r2, r3
 8000476:	4b59      	ldr	r3, [pc, #356]	; (80005dc <fsm_automatic_run+0x224>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	f000 82ca 	beq.w	8000a14 <fsm_automatic_run+0x65c>
			mode = 2;
 8000480:	4b5e      	ldr	r3, [pc, #376]	; (80005fc <fsm_automatic_run+0x244>)
 8000482:	2202      	movs	r2, #2
 8000484:	601a      	str	r2, [r3, #0]
			status = MAN_RED;
 8000486:	4b52      	ldr	r3, [pc, #328]	; (80005d0 <fsm_automatic_run+0x218>)
 8000488:	220c      	movs	r2, #12
 800048a:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 800048c:	2032      	movs	r0, #50	; 0x32
 800048e:	f001 f9c1 	bl	8001814 <setTimer1>
		}

		break;
 8000492:	e2bf      	b.n	8000a14 <fsm_automatic_run+0x65c>
	case State1:
		//TODO

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2120      	movs	r1, #32
 8000498:	484e      	ldr	r0, [pc, #312]	; (80005d4 <fsm_automatic_run+0x21c>)
 800049a:	f001 fdc6 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	484c      	ldr	r0, [pc, #304]	; (80005d4 <fsm_automatic_run+0x21c>)
 80004a4:	f001 fdc1 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	4849      	ldr	r0, [pc, #292]	; (80005d4 <fsm_automatic_run+0x21c>)
 80004ae:	f001 fdbc 	bl	800202a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b8:	4846      	ldr	r0, [pc, #280]	; (80005d4 <fsm_automatic_run+0x21c>)
 80004ba:	f001 fdb6 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c4:	4843      	ldr	r0, [pc, #268]	; (80005d4 <fsm_automatic_run+0x21c>)
 80004c6:	f001 fdb0 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	4840      	ldr	r0, [pc, #256]	; (80005d4 <fsm_automatic_run+0x21c>)
 80004d2:	f001 fdaa 	bl	800202a <HAL_GPIO_WritePin>

		if (timer2_flag == 1){
 80004d6:	4b4a      	ldr	r3, [pc, #296]	; (8000600 <fsm_automatic_run+0x248>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d14c      	bne.n	8000578 <fsm_automatic_run+0x1c0>
			updateLedBuffer(tmpTimeRed1/100);
 80004de:	4b44      	ldr	r3, [pc, #272]	; (80005f0 <fsm_automatic_run+0x238>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a48      	ldr	r2, [pc, #288]	; (8000604 <fsm_automatic_run+0x24c>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	1152      	asrs	r2, r2, #5
 80004ea:	17db      	asrs	r3, r3, #31
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 ffea 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeGreen1/100);
 80004f4:	4b40      	ldr	r3, [pc, #256]	; (80005f8 <fsm_automatic_run+0x240>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a42      	ldr	r2, [pc, #264]	; (8000604 <fsm_automatic_run+0x24c>)
 80004fa:	fb82 1203 	smull	r1, r2, r2, r3
 80004fe:	1152      	asrs	r2, r2, #5
 8000500:	17db      	asrs	r3, r3, #31
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f001 f83b 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <fsm_automatic_run+0x250>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b3f      	ldr	r3, [pc, #252]	; (800060c <fsm_automatic_run+0x254>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	db02      	blt.n	800051c <fsm_automatic_run+0x164>
 8000516:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <fsm_automatic_run+0x250>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <fsm_automatic_run+0x258>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b3a      	ldr	r3, [pc, #232]	; (800060c <fsm_automatic_run+0x254>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	db02      	blt.n	800052e <fsm_automatic_run+0x176>
 8000528:	4b39      	ldr	r3, [pc, #228]	; (8000610 <fsm_automatic_run+0x258>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]

			update7SEG_t(index_led_t ++);
 800052e:	4b38      	ldr	r3, [pc, #224]	; (8000610 <fsm_automatic_run+0x258>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	4936      	ldr	r1, [pc, #216]	; (8000610 <fsm_automatic_run+0x258>)
 8000536:	600a      	str	r2, [r1, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 ffe9 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <fsm_automatic_run+0x250>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	4930      	ldr	r1, [pc, #192]	; (8000608 <fsm_automatic_run+0x250>)
 8000546:	600a      	str	r2, [r1, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 ff85 	bl	8001458 <update7SEG>

			if(index_led == 2) tmpTimeRed1 = tmpTimeRed1 -100;
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <fsm_automatic_run+0x250>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d104      	bne.n	8000560 <fsm_automatic_run+0x1a8>
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <fsm_automatic_run+0x238>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b64      	subs	r3, #100	; 0x64
 800055c:	4a24      	ldr	r2, [pc, #144]	; (80005f0 <fsm_automatic_run+0x238>)
 800055e:	6013      	str	r3, [r2, #0]
			if(index_led_t ==2) tmpTimeGreen1 = tmpTimeGreen1 -100;
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <fsm_automatic_run+0x258>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d104      	bne.n	8000572 <fsm_automatic_run+0x1ba>
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <fsm_automatic_run+0x240>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b64      	subs	r3, #100	; 0x64
 800056e:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <fsm_automatic_run+0x240>)
 8000570:	6013      	str	r3, [r2, #0]
			setTimer2(50);
 8000572:	2032      	movs	r0, #50	; 0x32
 8000574:	f001 f990 	bl	8001898 <setTimer2>
		}


		if(timer1_flag == 1 ){
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <fsm_automatic_run+0x25c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10b      	bne.n	8000598 <fsm_automatic_run+0x1e0>
			tmpTimeGreen1 = greenTime;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <fsm_automatic_run+0x220>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <fsm_automatic_run+0x240>)
 8000586:	6013      	str	r3, [r2, #0]
			status = State2;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <fsm_automatic_run+0x218>)
 800058a:	2203      	movs	r2, #3
 800058c:	601a      	str	r2, [r3, #0]
			setTimer1(yellowTime);
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <fsm_automatic_run+0x22c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f001 f93e 	bl	8001814 <setTimer1>
		}

		if(isButton1Pressed() == 1){
 8000598:	f7ff fdd8 	bl	800014c <isButton1Pressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	f040 823a 	bne.w	8000a18 <fsm_automatic_run+0x660>
			mode = 2;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <fsm_automatic_run+0x244>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <fsm_automatic_run+0x21c>)
 80005b0:	f001 fd3b 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <fsm_automatic_run+0x21c>)
 80005bc:	f001 fd35 	bl	800202a <HAL_GPIO_WritePin>
			status = MAN_RED;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <fsm_automatic_run+0x218>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 80005c6:	2032      	movs	r0, #50	; 0x32
 80005c8:	f001 f924 	bl	8001814 <setTimer1>
		}



		break;
 80005cc:	e224      	b.n	8000a18 <fsm_automatic_run+0x660>
 80005ce:	bf00      	nop
 80005d0:	20000088 	.word	0x20000088
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000044 	.word	0x20000044
 80005dc:	20000040 	.word	0x20000040
 80005e0:	200000ac 	.word	0x200000ac
 80005e4:	20000048 	.word	0x20000048
 80005e8:	200000b0 	.word	0x200000b0
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	200000b8 	.word	0x200000b8
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	200000b4 	.word	0x200000b4
 80005fc:	2000003c 	.word	0x2000003c
 8000600:	200000a8 	.word	0x200000a8
 8000604:	51eb851f 	.word	0x51eb851f
 8000608:	20000080 	.word	0x20000080
 800060c:	0800306c 	.word	0x0800306c
 8000610:	20000084 	.word	0x20000084
 8000614:	200000a0 	.word	0x200000a0
	case State2:
		//TODO
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	489d      	ldr	r0, [pc, #628]	; (8000894 <fsm_automatic_run+0x4dc>)
 800061e:	f001 fd04 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	489b      	ldr	r0, [pc, #620]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000628:	f001 fcff 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4898      	ldr	r0, [pc, #608]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000632:	f001 fcfa 	bl	800202a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4895      	ldr	r0, [pc, #596]	; (8000894 <fsm_automatic_run+0x4dc>)
 800063e:	f001 fcf4 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4892      	ldr	r0, [pc, #584]	; (8000894 <fsm_automatic_run+0x4dc>)
 800064a:	f001 fcee 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	488f      	ldr	r0, [pc, #572]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000656:	f001 fce8 	bl	800202a <HAL_GPIO_WritePin>

//		updateLedBuffer_2(tmpTimeRed/100, tmpTimeYellow/100);
		if (timer2_flag == 1){
 800065a:	4b8f      	ldr	r3, [pc, #572]	; (8000898 <fsm_automatic_run+0x4e0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d14c      	bne.n	80006fc <fsm_automatic_run+0x344>
			updateLedBuffer(tmpTimeRed1/100);
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <fsm_automatic_run+0x4e4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a8e      	ldr	r2, [pc, #568]	; (80008a0 <fsm_automatic_run+0x4e8>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1152      	asrs	r2, r2, #5
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff28 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeYellow1/100);
 8000678:	4b8a      	ldr	r3, [pc, #552]	; (80008a4 <fsm_automatic_run+0x4ec>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a88      	ldr	r2, [pc, #544]	; (80008a0 <fsm_automatic_run+0x4e8>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1152      	asrs	r2, r2, #5
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 ff79 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 800068e:	4b86      	ldr	r3, [pc, #536]	; (80008a8 <fsm_automatic_run+0x4f0>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b86      	ldr	r3, [pc, #536]	; (80008ac <fsm_automatic_run+0x4f4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	db02      	blt.n	80006a0 <fsm_automatic_run+0x2e8>
 800069a:	4b83      	ldr	r3, [pc, #524]	; (80008a8 <fsm_automatic_run+0x4f0>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 80006a0:	4b83      	ldr	r3, [pc, #524]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b81      	ldr	r3, [pc, #516]	; (80008ac <fsm_automatic_run+0x4f4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	db02      	blt.n	80006b2 <fsm_automatic_run+0x2fa>
 80006ac:	4b80      	ldr	r3, [pc, #512]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]

			update7SEG_t(index_led_t ++);
 80006b2:	4b7f      	ldr	r3, [pc, #508]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	497d      	ldr	r1, [pc, #500]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80006ba:	600a      	str	r2, [r1, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff27 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 80006c2:	4b79      	ldr	r3, [pc, #484]	; (80008a8 <fsm_automatic_run+0x4f0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	4977      	ldr	r1, [pc, #476]	; (80008a8 <fsm_automatic_run+0x4f0>)
 80006ca:	600a      	str	r2, [r1, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fec3 	bl	8001458 <update7SEG>

			if(index_led == 2) tmpTimeRed1 = tmpTimeRed1 -100;
 80006d2:	4b75      	ldr	r3, [pc, #468]	; (80008a8 <fsm_automatic_run+0x4f0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d104      	bne.n	80006e4 <fsm_automatic_run+0x32c>
 80006da:	4b70      	ldr	r3, [pc, #448]	; (800089c <fsm_automatic_run+0x4e4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b64      	subs	r3, #100	; 0x64
 80006e0:	4a6e      	ldr	r2, [pc, #440]	; (800089c <fsm_automatic_run+0x4e4>)
 80006e2:	6013      	str	r3, [r2, #0]
			if(index_led_t ==2) tmpTimeYellow1 = tmpTimeYellow1 - 100;
 80006e4:	4b72      	ldr	r3, [pc, #456]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d104      	bne.n	80006f6 <fsm_automatic_run+0x33e>
 80006ec:	4b6d      	ldr	r3, [pc, #436]	; (80008a4 <fsm_automatic_run+0x4ec>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b64      	subs	r3, #100	; 0x64
 80006f2:	4a6c      	ldr	r2, [pc, #432]	; (80008a4 <fsm_automatic_run+0x4ec>)
 80006f4:	6013      	str	r3, [r2, #0]
setTimer2(50);
 80006f6:	2032      	movs	r0, #50	; 0x32
 80006f8:	f001 f8ce 	bl	8001898 <setTimer2>
		}

		if(timer1_flag == 1 ){
 80006fc:	4b6d      	ldr	r3, [pc, #436]	; (80008b4 <fsm_automatic_run+0x4fc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d10f      	bne.n	8000724 <fsm_automatic_run+0x36c>
			tmpTimeRed1 = redTime;
 8000704:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <fsm_automatic_run+0x500>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a64      	ldr	r2, [pc, #400]	; (800089c <fsm_automatic_run+0x4e4>)
 800070a:	6013      	str	r3, [r2, #0]
			tmpTimeYellow1 = yellowTime;
 800070c:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <fsm_automatic_run+0x504>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a64      	ldr	r2, [pc, #400]	; (80008a4 <fsm_automatic_run+0x4ec>)
 8000712:	6013      	str	r3, [r2, #0]
			status = State3;
 8000714:	4b6a      	ldr	r3, [pc, #424]	; (80008c0 <fsm_automatic_run+0x508>)
 8000716:	2204      	movs	r2, #4
 8000718:	601a      	str	r2, [r3, #0]
			setTimer1(greenTime);
 800071a:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <fsm_automatic_run+0x50c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f878 	bl	8001814 <setTimer1>
		}
		if(isButton1Pressed() == 1){
 8000724:	f7ff fd12 	bl	800014c <isButton1Pressed>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	f040 8176 	bne.w	8000a1c <fsm_automatic_run+0x664>
			mode = 2;
 8000730:	4b65      	ldr	r3, [pc, #404]	; (80008c8 <fsm_automatic_run+0x510>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	4856      	ldr	r0, [pc, #344]	; (8000894 <fsm_automatic_run+0x4dc>)
 800073c:	f001 fc75 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4853      	ldr	r0, [pc, #332]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000748:	f001 fc6f 	bl	800202a <HAL_GPIO_WritePin>
			status = MAN_RED;
 800074c:	4b5c      	ldr	r3, [pc, #368]	; (80008c0 <fsm_automatic_run+0x508>)
 800074e:	220c      	movs	r2, #12
 8000750:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f001 f85e 	bl	8001814 <setTimer1>
		}



		break;
 8000758:	e160      	b.n	8000a1c <fsm_automatic_run+0x664>

	case State3:
		//TODO
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2120      	movs	r1, #32
 800075e:	484d      	ldr	r0, [pc, #308]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000760:	f001 fc63 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	484a      	ldr	r0, [pc, #296]	; (8000894 <fsm_automatic_run+0x4dc>)
 800076a:	f001 fc5e 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4848      	ldr	r0, [pc, #288]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000774:	f001 fc59 	bl	800202a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	4845      	ldr	r0, [pc, #276]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000780:	f001 fc53 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4842      	ldr	r0, [pc, #264]	; (8000894 <fsm_automatic_run+0x4dc>)
 800078c:	f001 fc4d 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	483f      	ldr	r0, [pc, #252]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000798:	f001 fc47 	bl	800202a <HAL_GPIO_WritePin>

//		updateLedBuffer_2(tmpTimeGreen/100, tmpTimeRed/100);
		if (timer2_flag == 1){
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <fsm_automatic_run+0x4e0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d14c      	bne.n	800083e <fsm_automatic_run+0x486>
			updateLedBuffer(tmpTimeGreen1/100);
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <fsm_automatic_run+0x514>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <fsm_automatic_run+0x4e8>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	1152      	asrs	r2, r2, #5
 80007b0:	17db      	asrs	r3, r3, #31
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fe87 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeRed1/100);
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <fsm_automatic_run+0x4e4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <fsm_automatic_run+0x4e8>)
 80007c0:	fb82 1203 	smull	r1, r2, r2, r3
 80007c4:	1152      	asrs	r2, r2, #5
 80007c6:	17db      	asrs	r3, r3, #31
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fed8 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <fsm_automatic_run+0x4f0>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b35      	ldr	r3, [pc, #212]	; (80008ac <fsm_automatic_run+0x4f4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	db02      	blt.n	80007e2 <fsm_automatic_run+0x42a>
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <fsm_automatic_run+0x4f0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <fsm_automatic_run+0x4f4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	db02      	blt.n	80007f4 <fsm_automatic_run+0x43c>
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]

			update7SEG_t(index_led_t ++);
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	492d      	ldr	r1, [pc, #180]	; (80008b0 <fsm_automatic_run+0x4f8>)
 80007fc:	600a      	str	r2, [r1, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fe86 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <fsm_automatic_run+0x4f0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4927      	ldr	r1, [pc, #156]	; (80008a8 <fsm_automatic_run+0x4f0>)
 800080c:	600a      	str	r2, [r1, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fe22 	bl	8001458 <update7SEG>

			if(index_led == 2) tmpTimeGreen1 = tmpTimeGreen1 -100;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <fsm_automatic_run+0x4f0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d104      	bne.n	8000826 <fsm_automatic_run+0x46e>
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <fsm_automatic_run+0x514>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b64      	subs	r3, #100	; 0x64
 8000822:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <fsm_automatic_run+0x514>)
 8000824:	6013      	str	r3, [r2, #0]
			if(index_led_t ==2) tmpTimeRed1 = tmpTimeRed1 - 100;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <fsm_automatic_run+0x4f8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d104      	bne.n	8000838 <fsm_automatic_run+0x480>
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <fsm_automatic_run+0x4e4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3b64      	subs	r3, #100	; 0x64
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <fsm_automatic_run+0x4e4>)
 8000836:	6013      	str	r3, [r2, #0]
setTimer2(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f001 f82d 	bl	8001898 <setTimer2>
		}

		if(timer1_flag == 1 ){
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <fsm_automatic_run+0x4fc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10b      	bne.n	800085e <fsm_automatic_run+0x4a6>
            tmpTimeGreen1 = greenTime;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <fsm_automatic_run+0x50c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a20      	ldr	r2, [pc, #128]	; (80008cc <fsm_automatic_run+0x514>)
 800084c:	6013      	str	r3, [r2, #0]
			status = State4;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <fsm_automatic_run+0x508>)
 8000850:	2205      	movs	r2, #5
 8000852:	601a      	str	r2, [r3, #0]
			setTimer1(yellowTime);
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <fsm_automatic_run+0x504>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 ffdb 	bl	8001814 <setTimer1>
		}
		if(isButton1Pressed() == 1){
 800085e:	f7ff fc75 	bl	800014c <isButton1Pressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	f040 80db 	bne.w	8000a20 <fsm_automatic_run+0x668>
			mode = 2;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <fsm_automatic_run+0x510>)
 800086c:	2202      	movs	r2, #2
 800086e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2120      	movs	r1, #32
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000876:	f001 fbd8 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <fsm_automatic_run+0x4dc>)
 8000882:	f001 fbd2 	bl	800202a <HAL_GPIO_WritePin>
			status = MAN_RED;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <fsm_automatic_run+0x508>)
 8000888:	220c      	movs	r2, #12
 800088a:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 800088c:	2032      	movs	r0, #50	; 0x32
 800088e:	f000 ffc1 	bl	8001814 <setTimer1>
		}

		break;
 8000892:	e0c5      	b.n	8000a20 <fsm_automatic_run+0x668>
 8000894:	40010800 	.word	0x40010800
 8000898:	200000a8 	.word	0x200000a8
 800089c:	200000b8 	.word	0x200000b8
 80008a0:	51eb851f 	.word	0x51eb851f
 80008a4:	200000bc 	.word	0x200000bc
 80008a8:	20000080 	.word	0x20000080
 80008ac:	0800306c 	.word	0x0800306c
 80008b0:	20000084 	.word	0x20000084
 80008b4:	200000a0 	.word	0x200000a0
 80008b8:	20000040 	.word	0x20000040
 80008bc:	20000048 	.word	0x20000048
 80008c0:	20000088 	.word	0x20000088
 80008c4:	20000044 	.word	0x20000044
 80008c8:	2000003c 	.word	0x2000003c
 80008cc:	200000b4 	.word	0x200000b4

	case State4:
		//TODO
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2120      	movs	r1, #32
 80008d4:	4855      	ldr	r0, [pc, #340]	; (8000a2c <fsm_automatic_run+0x674>)
 80008d6:	f001 fba8 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4853      	ldr	r0, [pc, #332]	; (8000a2c <fsm_automatic_run+0x674>)
 80008e0:	f001 fba3 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	4850      	ldr	r0, [pc, #320]	; (8000a2c <fsm_automatic_run+0x674>)
 80008ea:	f001 fb9e 	bl	800202a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	484d      	ldr	r0, [pc, #308]	; (8000a2c <fsm_automatic_run+0x674>)
 80008f6:	f001 fb98 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000900:	484a      	ldr	r0, [pc, #296]	; (8000a2c <fsm_automatic_run+0x674>)
 8000902:	f001 fb92 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	4847      	ldr	r0, [pc, #284]	; (8000a2c <fsm_automatic_run+0x674>)
 800090e:	f001 fb8c 	bl	800202a <HAL_GPIO_WritePin>

//		updateLedBuffer_2(tmpTimeYellow/100, tmpTimeRed/100);
		if (timer2_flag == 1){
 8000912:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <fsm_automatic_run+0x678>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d14c      	bne.n	80009b4 <fsm_automatic_run+0x5fc>
			updateLedBuffer(tmpTimeYellow1/100);
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <fsm_automatic_run+0x67c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <fsm_automatic_run+0x680>)
 8000920:	fb82 1203 	smull	r1, r2, r2, r3
 8000924:	1152      	asrs	r2, r2, #5
 8000926:	17db      	asrs	r3, r3, #31
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fdcc 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeRed1/100);
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <fsm_automatic_run+0x684>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <fsm_automatic_run+0x680>)
 8000936:	fb82 1203 	smull	r1, r2, r2, r3
 800093a:	1152      	asrs	r2, r2, #5
 800093c:	17db      	asrs	r3, r3, #31
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fe1d 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <fsm_automatic_run+0x688>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <fsm_automatic_run+0x68c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	db02      	blt.n	8000958 <fsm_automatic_run+0x5a0>
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <fsm_automatic_run+0x688>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <fsm_automatic_run+0x690>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <fsm_automatic_run+0x68c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	db02      	blt.n	800096a <fsm_automatic_run+0x5b2>
 8000964:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <fsm_automatic_run+0x690>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]

			update7SEG_t(index_led_t ++);
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <fsm_automatic_run+0x690>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	4935      	ldr	r1, [pc, #212]	; (8000a48 <fsm_automatic_run+0x690>)
 8000972:	600a      	str	r2, [r1, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fdcb 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <fsm_automatic_run+0x688>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	492f      	ldr	r1, [pc, #188]	; (8000a40 <fsm_automatic_run+0x688>)
 8000982:	600a      	str	r2, [r1, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd67 	bl	8001458 <update7SEG>

			if(index_led == 2) tmpTimeYellow1 = tmpTimeYellow1-100;
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <fsm_automatic_run+0x688>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d104      	bne.n	800099c <fsm_automatic_run+0x5e4>
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <fsm_automatic_run+0x67c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b64      	subs	r3, #100	; 0x64
 8000998:	4a26      	ldr	r2, [pc, #152]	; (8000a34 <fsm_automatic_run+0x67c>)
 800099a:	6013      	str	r3, [r2, #0]
			if(index_led_t ==2) tmpTimeRed1= tmpTimeRed1 -100;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <fsm_automatic_run+0x690>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d104      	bne.n	80009ae <fsm_automatic_run+0x5f6>
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <fsm_automatic_run+0x684>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3b64      	subs	r3, #100	; 0x64
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <fsm_automatic_run+0x684>)
 80009ac:	6013      	str	r3, [r2, #0]
setTimer2(50);
 80009ae:	2032      	movs	r0, #50	; 0x32
 80009b0:	f000 ff72 	bl	8001898 <setTimer2>
		}

		if(timer1_flag == 1 ){
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <fsm_automatic_run+0x694>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10f      	bne.n	80009dc <fsm_automatic_run+0x624>
  tmpTimeRed1 = redTime;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <fsm_automatic_run+0x698>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <fsm_automatic_run+0x684>)
 80009c2:	6013      	str	r3, [r2, #0]
  tmpTimeYellow1 = yellowTime;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <fsm_automatic_run+0x69c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <fsm_automatic_run+0x67c>)
 80009ca:	6013      	str	r3, [r2, #0]
			status = State1;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <fsm_automatic_run+0x6a0>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
			setTimer1(greenTime);
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <fsm_automatic_run+0x6a4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 ff1c 	bl	8001814 <setTimer1>
		}
		if(isButton1Pressed() == 1){
 80009dc:	f7ff fbb6 	bl	800014c <isButton1Pressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d11e      	bne.n	8000a24 <fsm_automatic_run+0x66c>
			mode = 2;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <fsm_automatic_run+0x6a8>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <fsm_automatic_run+0x674>)
 80009f2:	f001 fb1a 	bl	800202a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <fsm_automatic_run+0x674>)
 80009fe:	f001 fb14 	bl	800202a <HAL_GPIO_WritePin>
			status = MAN_RED;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <fsm_automatic_run+0x6a0>)
 8000a04:	220c      	movs	r2, #12
 8000a06:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f000 ff03 	bl	8001814 <setTimer1>
		}

		break;
 8000a0e:	e009      	b.n	8000a24 <fsm_automatic_run+0x66c>

	default:
		break;
 8000a10:	bf00      	nop
 8000a12:	e008      	b.n	8000a26 <fsm_automatic_run+0x66e>
		break;
 8000a14:	bf00      	nop
 8000a16:	e006      	b.n	8000a26 <fsm_automatic_run+0x66e>
		break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <fsm_automatic_run+0x66e>
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <fsm_automatic_run+0x66e>
		break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <fsm_automatic_run+0x66e>
		break;
 8000a24:	bf00      	nop
	}
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	200000a8 	.word	0x200000a8
 8000a34:	200000bc 	.word	0x200000bc
 8000a38:	51eb851f 	.word	0x51eb851f
 8000a3c:	200000b8 	.word	0x200000b8
 8000a40:	20000080 	.word	0x20000080
 8000a44:	0800306c 	.word	0x0800306c
 8000a48:	20000084 	.word	0x20000084
 8000a4c:	200000a0 	.word	0x200000a0
 8000a50:	20000040 	.word	0x20000040
 8000a54:	20000048 	.word	0x20000048
 8000a58:	20000088 	.word	0x20000088
 8000a5c:	20000044 	.word	0x20000044
 8000a60:	2000003c 	.word	0x2000003c

08000a64 <fsm_manual_run>:

const int MAX_LED = 2;
int index_led = 0;
int index_led_t =0;
int mode = 2;
void fsm_manual_run(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	switch(status){
 8000a68:	4bb6      	ldr	r3, [pc, #728]	; (8000d44 <fsm_manual_run+0x2e0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b0e      	cmp	r3, #14
 8000a6e:	d07f      	beq.n	8000b70 <fsm_manual_run+0x10c>
 8000a70:	2b0e      	cmp	r3, #14
 8000a72:	f300 8181 	bgt.w	8000d78 <fsm_manual_run+0x314>
 8000a76:	2b0c      	cmp	r3, #12
 8000a78:	d003      	beq.n	8000a82 <fsm_manual_run+0x1e>
 8000a7a:	2b0d      	cmp	r3, #13
 8000a7c:	f000 80ef 	beq.w	8000c5e <fsm_manual_run+0x1fa>
    	   greenTime = tmpTimeGreen;
       }

		break;
	default:
		break;
 8000a80:	e17a      	b.n	8000d78 <fsm_manual_run+0x314>
		if (timer1_flag == 1){
 8000a82:	4bb1      	ldr	r3, [pc, #708]	; (8000d48 <fsm_manual_run+0x2e4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d13b      	bne.n	8000b02 <fsm_manual_run+0x9e>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	48af      	ldr	r0, [pc, #700]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000a8e:	f001 fae4 	bl	800205a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	48ad      	ldr	r0, [pc, #692]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000a98:	f001 fadf 	bl	800205a <HAL_GPIO_TogglePin>
			updateLedBuffer(mode);
 8000a9c:	4bac      	ldr	r3, [pc, #688]	; (8000d50 <fsm_manual_run+0x2ec>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd11 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeRed/100);
 8000aa6:	4bab      	ldr	r3, [pc, #684]	; (8000d54 <fsm_manual_run+0x2f0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4aab      	ldr	r2, [pc, #684]	; (8000d58 <fsm_manual_run+0x2f4>)
 8000aac:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab0:	1152      	asrs	r2, r2, #5
 8000ab2:	17db      	asrs	r3, r3, #31
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd62 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 8000abc:	4ba7      	ldr	r3, [pc, #668]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	db02      	blt.n	8000acc <fsm_manual_run+0x68>
 8000ac6:	4ba5      	ldr	r3, [pc, #660]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	db02      	blt.n	8000adc <fsm_manual_run+0x78>
 8000ad6:	4ba2      	ldr	r3, [pc, #648]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			update7SEG_t(index_led_t ++);
 8000adc:	4ba0      	ldr	r3, [pc, #640]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	499f      	ldr	r1, [pc, #636]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000ae4:	600a      	str	r2, [r1, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fd12 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 8000aec:	4b9b      	ldr	r3, [pc, #620]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	499a      	ldr	r1, [pc, #616]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000af4:	600a      	str	r2, [r1, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fcae 	bl	8001458 <update7SEG>
			setTimer1(50);
 8000afc:	2032      	movs	r0, #50	; 0x32
 8000afe:	f000 fe89 	bl	8001814 <setTimer1>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4891      	ldr	r0, [pc, #580]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b08:	f001 fa8f 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	488e      	ldr	r0, [pc, #568]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b12:	f001 fa8a 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	488b      	ldr	r0, [pc, #556]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b1e:	f001 fa84 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	4888      	ldr	r0, [pc, #544]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b2a:	f001 fa7e 	bl	800202a <HAL_GPIO_WritePin>
		if(isButton1Pressed() == 1){
 8000b2e:	f7ff fb0d 	bl	800014c <isButton1Pressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <fsm_manual_run+0xe6>
			mode = 3;
 8000b38:	4b85      	ldr	r3, [pc, #532]	; (8000d50 <fsm_manual_run+0x2ec>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
			status = MAN_YELLOW;
 8000b3e:	4b81      	ldr	r3, [pc, #516]	; (8000d44 <fsm_manual_run+0x2e0>)
 8000b40:	220e      	movs	r2, #14
 8000b42:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000b44:	2032      	movs	r0, #50	; 0x32
 8000b46:	f000 fe65 	bl	8001814 <setTimer1>
		tmpTimeRed = fsm_setting_run(tmpTimeRed);
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <fsm_manual_run+0x2f0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f91c 	bl	8000d8c <fsm_setting_run>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a7f      	ldr	r2, [pc, #508]	; (8000d54 <fsm_manual_run+0x2f0>)
 8000b58:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8000b5a:	f7ff fb1b 	bl	8000194 <isButton3Pressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	f040 810b 	bne.w	8000d7c <fsm_manual_run+0x318>
			redTime = tmpTimeRed;
 8000b66:	4b7b      	ldr	r3, [pc, #492]	; (8000d54 <fsm_manual_run+0x2f0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a7e      	ldr	r2, [pc, #504]	; (8000d64 <fsm_manual_run+0x300>)
 8000b6c:	6013      	str	r3, [r2, #0]
		break;
 8000b6e:	e105      	b.n	8000d7c <fsm_manual_run+0x318>
		if (timer1_flag == 1){
 8000b70:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <fsm_manual_run+0x2e4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d13b      	bne.n	8000bf0 <fsm_manual_run+0x18c>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4874      	ldr	r0, [pc, #464]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b7c:	f001 fa6d 	bl	800205a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin);
 8000b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b84:	4871      	ldr	r0, [pc, #452]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000b86:	f001 fa68 	bl	800205a <HAL_GPIO_TogglePin>
			updateLedBuffer(mode);
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <fsm_manual_run+0x2ec>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fc9a 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeYellow/100);
 8000b94:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <fsm_manual_run+0x304>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a6f      	ldr	r2, [pc, #444]	; (8000d58 <fsm_manual_run+0x2f4>)
 8000b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9e:	1152      	asrs	r2, r2, #5
 8000ba0:	17db      	asrs	r3, r3, #31
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fceb 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 8000baa:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	db02      	blt.n	8000bba <fsm_manual_run+0x156>
 8000bb4:	4b69      	ldr	r3, [pc, #420]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 8000bba:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	db02      	blt.n	8000bca <fsm_manual_run+0x166>
 8000bc4:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
			update7SEG_t(index_led_t ++);
 8000bca:	4b65      	ldr	r3, [pc, #404]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	4963      	ldr	r1, [pc, #396]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000bd2:	600a      	str	r2, [r1, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fc9b 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 8000bda:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	495e      	ldr	r1, [pc, #376]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000be2:	600a      	str	r2, [r1, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fc37 	bl	8001458 <update7SEG>
			setTimer1(50);
 8000bea:	2032      	movs	r0, #50	; 0x32
 8000bec:	f000 fe12 	bl	8001814 <setTimer1>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4855      	ldr	r0, [pc, #340]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000bf6:	f001 fa18 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	4853      	ldr	r0, [pc, #332]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000c00:	f001 fa13 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	4850      	ldr	r0, [pc, #320]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000c0c:	f001 fa0d 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	484d      	ldr	r0, [pc, #308]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000c18:	f001 fa07 	bl	800202a <HAL_GPIO_WritePin>
		if(isButton1Pressed() == 1){
 8000c1c:	f7ff fa96 	bl	800014c <isButton1Pressed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d108      	bne.n	8000c38 <fsm_manual_run+0x1d4>
			mode = 4;
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <fsm_manual_run+0x2ec>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	601a      	str	r2, [r3, #0]
			status = MAN_GREEN;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <fsm_manual_run+0x2e0>)
 8000c2e:	220d      	movs	r2, #13
 8000c30:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f000 fdee 	bl	8001814 <setTimer1>
		tmpTimeYellow = fsm_setting_run(tmpTimeYellow);
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <fsm_manual_run+0x304>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8a5 	bl	8000d8c <fsm_setting_run>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <fsm_manual_run+0x304>)
 8000c46:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8000c48:	f7ff faa4 	bl	8000194 <isButton3Pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 8096 	bne.w	8000d80 <fsm_manual_run+0x31c>
			yellowTime = tmpTimeYellow;
 8000c54:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <fsm_manual_run+0x304>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a44      	ldr	r2, [pc, #272]	; (8000d6c <fsm_manual_run+0x308>)
 8000c5a:	6013      	str	r3, [r2, #0]
		break;
 8000c5c:	e090      	b.n	8000d80 <fsm_manual_run+0x31c>
		if (timer1_flag == 1){
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <fsm_manual_run+0x2e4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d13b      	bne.n	8000cde <fsm_manual_run+0x27a>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	4838      	ldr	r0, [pc, #224]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000c6a:	f001 f9f6 	bl	800205a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin);
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	4836      	ldr	r0, [pc, #216]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000c74:	f001 f9f1 	bl	800205a <HAL_GPIO_TogglePin>
			updateLedBuffer(mode);
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <fsm_manual_run+0x2ec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fc23 	bl	80014c8 <updateLedBuffer>
			updateLedBuffer_t(tmpTimeGreen/100);
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <fsm_manual_run+0x30c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <fsm_manual_run+0x2f4>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1152      	asrs	r2, r2, #5
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fc74 	bl	8001580 <updateLedBuffer_t>
			if(index_led >= MAX_LED){index_led = 0;}
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	db02      	blt.n	8000ca8 <fsm_manual_run+0x244>
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
			if(index_led_t >= MAX_LED){index_led_t = 0;}
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2202      	movs	r2, #2
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	db02      	blt.n	8000cb8 <fsm_manual_run+0x254>
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
			update7SEG_t(index_led_t ++);
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4928      	ldr	r1, [pc, #160]	; (8000d60 <fsm_manual_run+0x2fc>)
 8000cc0:	600a      	str	r2, [r1, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fc24 	bl	8001510 <update7SEG_t>
			update7SEG(index_led ++);
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	4923      	ldr	r1, [pc, #140]	; (8000d5c <fsm_manual_run+0x2f8>)
 8000cd0:	600a      	str	r2, [r1, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fbc0 	bl	8001458 <update7SEG>
			setTimer1(50);
 8000cd8:	2032      	movs	r0, #50	; 0x32
 8000cda:	f000 fd9b 	bl	8001814 <setTimer1>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	481a      	ldr	r0, [pc, #104]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000ce4:	f001 f9a1 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000cee:	f001 f99c 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000cfa:	f001 f996 	bl	800202a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <fsm_manual_run+0x2e8>)
 8000d06:	f001 f990 	bl	800202a <HAL_GPIO_WritePin>
		if(isButton1Pressed() == 1){
 8000d0a:	f7ff fa1f 	bl	800014c <isButton1Pressed>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <fsm_manual_run+0x2bc>
			status = INIT;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <fsm_manual_run+0x2e0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000d1a:	2032      	movs	r0, #50	; 0x32
 8000d1c:	f000 fd7a 	bl	8001814 <setTimer1>
		tmpTimeGreen = fsm_setting_run(tmpTimeGreen);
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <fsm_manual_run+0x30c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f831 	bl	8000d8c <fsm_setting_run>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <fsm_manual_run+0x30c>)
 8000d2e:	6013      	str	r3, [r2, #0]
       if(isButton3Pressed() == 1){
 8000d30:	f7ff fa30 	bl	8000194 <isButton3Pressed>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d124      	bne.n	8000d84 <fsm_manual_run+0x320>
    	   greenTime = tmpTimeGreen;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <fsm_manual_run+0x30c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <fsm_manual_run+0x310>)
 8000d40:	6013      	str	r3, [r2, #0]
		break;
 8000d42:	e01f      	b.n	8000d84 <fsm_manual_run+0x320>
 8000d44:	20000088 	.word	0x20000088
 8000d48:	200000a0 	.word	0x200000a0
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	200000ac 	.word	0x200000ac
 8000d58:	51eb851f 	.word	0x51eb851f
 8000d5c:	20000080 	.word	0x20000080
 8000d60:	20000084 	.word	0x20000084
 8000d64:	20000040 	.word	0x20000040
 8000d68:	200000b0 	.word	0x200000b0
 8000d6c:	20000048 	.word	0x20000048
 8000d70:	200000c0 	.word	0x200000c0
 8000d74:	20000044 	.word	0x20000044
		break;
 8000d78:	bf00      	nop
 8000d7a:	e004      	b.n	8000d86 <fsm_manual_run+0x322>
		break;
 8000d7c:	bf00      	nop
 8000d7e:	e002      	b.n	8000d86 <fsm_manual_run+0x322>
		break;
 8000d80:	bf00      	nop
 8000d82:	e000      	b.n	8000d86 <fsm_manual_run+0x322>
		break;
 8000d84:	bf00      	nop
	}
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop

08000d8c <fsm_setting_run>:

#include "fsm_setting.h"

int tmp3 = 0;

int fsm_setting_run(int curT){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (isButton2Pressed() == 1) {
 8000d94:	f7ff f9ec 	bl	8000170 <isButton2Pressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d109      	bne.n	8000db2 <fsm_setting_run+0x26>
        curT = curT + 100;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3364      	adds	r3, #100	; 0x64
 8000da2:	607b      	str	r3, [r7, #4]
        if (curT > 9900) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000daa:	4293      	cmp	r3, r2
 8000dac:	dd01      	ble.n	8000db2 <fsm_setting_run+0x26>
            curT = 100;
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	607b      	str	r3, [r7, #4]
        }

    }

    return curT;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <display7SEG>:
 */

#include "led_7seg.h"

  void display7SEG(int num)
    {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
   	  if(num == 0)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d122      	bne.n	8000e10 <display7SEG+0x54>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	48be      	ldr	r0, [pc, #760]	; (80010c8 <display7SEG+0x30c>)
 8000dd0:	f001 f92b 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	48bb      	ldr	r0, [pc, #748]	; (80010c8 <display7SEG+0x30c>)
 8000dda:	f001 f926 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2104      	movs	r1, #4
 8000de2:	48b9      	ldr	r0, [pc, #740]	; (80010c8 <display7SEG+0x30c>)
 8000de4:	f001 f921 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2108      	movs	r1, #8
 8000dec:	48b6      	ldr	r0, [pc, #728]	; (80010c8 <display7SEG+0x30c>)
 8000dee:	f001 f91c 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	48b4      	ldr	r0, [pc, #720]	; (80010c8 <display7SEG+0x30c>)
 8000df8:	f001 f917 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2120      	movs	r1, #32
 8000e00:	48b1      	ldr	r0, [pc, #708]	; (80010c8 <display7SEG+0x30c>)
 8000e02:	f001 f912 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	48af      	ldr	r0, [pc, #700]	; (80010c8 <display7SEG+0x30c>)
 8000e0c:	f001 f90d 	bl	800202a <HAL_GPIO_WritePin>

   	  }
   	  if(num == 1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d122      	bne.n	8000e5c <display7SEG+0xa0>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2101      	movs	r1, #1
 8000e1a:	48ab      	ldr	r0, [pc, #684]	; (80010c8 <display7SEG+0x30c>)
 8000e1c:	f001 f905 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	48a8      	ldr	r0, [pc, #672]	; (80010c8 <display7SEG+0x30c>)
 8000e26:	f001 f900 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	48a6      	ldr	r0, [pc, #664]	; (80010c8 <display7SEG+0x30c>)
 8000e30:	f001 f8fb 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2108      	movs	r1, #8
 8000e38:	48a3      	ldr	r0, [pc, #652]	; (80010c8 <display7SEG+0x30c>)
 8000e3a:	f001 f8f6 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2110      	movs	r1, #16
 8000e42:	48a1      	ldr	r0, [pc, #644]	; (80010c8 <display7SEG+0x30c>)
 8000e44:	f001 f8f1 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	489e      	ldr	r0, [pc, #632]	; (80010c8 <display7SEG+0x30c>)
 8000e4e:	f001 f8ec 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	489c      	ldr	r0, [pc, #624]	; (80010c8 <display7SEG+0x30c>)
 8000e58:	f001 f8e7 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d122      	bne.n	8000ea8 <display7SEG+0xec>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	4898      	ldr	r0, [pc, #608]	; (80010c8 <display7SEG+0x30c>)
 8000e68:	f001 f8df 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4895      	ldr	r0, [pc, #596]	; (80010c8 <display7SEG+0x30c>)
 8000e72:	f001 f8da 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4893      	ldr	r0, [pc, #588]	; (80010c8 <display7SEG+0x30c>)
 8000e7c:	f001 f8d5 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2108      	movs	r1, #8
 8000e84:	4890      	ldr	r0, [pc, #576]	; (80010c8 <display7SEG+0x30c>)
 8000e86:	f001 f8d0 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	488e      	ldr	r0, [pc, #568]	; (80010c8 <display7SEG+0x30c>)
 8000e90:	f001 f8cb 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2120      	movs	r1, #32
 8000e98:	488b      	ldr	r0, [pc, #556]	; (80010c8 <display7SEG+0x30c>)
 8000e9a:	f001 f8c6 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	4889      	ldr	r0, [pc, #548]	; (80010c8 <display7SEG+0x30c>)
 8000ea4:	f001 f8c1 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d122      	bne.n	8000ef4 <display7SEG+0x138>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4885      	ldr	r0, [pc, #532]	; (80010c8 <display7SEG+0x30c>)
 8000eb4:	f001 f8b9 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4882      	ldr	r0, [pc, #520]	; (80010c8 <display7SEG+0x30c>)
 8000ebe:	f001 f8b4 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4880      	ldr	r0, [pc, #512]	; (80010c8 <display7SEG+0x30c>)
 8000ec8:	f001 f8af 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2108      	movs	r1, #8
 8000ed0:	487d      	ldr	r0, [pc, #500]	; (80010c8 <display7SEG+0x30c>)
 8000ed2:	f001 f8aa 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2110      	movs	r1, #16
 8000eda:	487b      	ldr	r0, [pc, #492]	; (80010c8 <display7SEG+0x30c>)
 8000edc:	f001 f8a5 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4878      	ldr	r0, [pc, #480]	; (80010c8 <display7SEG+0x30c>)
 8000ee6:	f001 f8a0 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4876      	ldr	r0, [pc, #472]	; (80010c8 <display7SEG+0x30c>)
 8000ef0:	f001 f89b 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 4)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d122      	bne.n	8000f40 <display7SEG+0x184>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2101      	movs	r1, #1
 8000efe:	4872      	ldr	r0, [pc, #456]	; (80010c8 <display7SEG+0x30c>)
 8000f00:	f001 f893 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	486f      	ldr	r0, [pc, #444]	; (80010c8 <display7SEG+0x30c>)
 8000f0a:	f001 f88e 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2104      	movs	r1, #4
 8000f12:	486d      	ldr	r0, [pc, #436]	; (80010c8 <display7SEG+0x30c>)
 8000f14:	f001 f889 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	486a      	ldr	r0, [pc, #424]	; (80010c8 <display7SEG+0x30c>)
 8000f1e:	f001 f884 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2110      	movs	r1, #16
 8000f26:	4868      	ldr	r0, [pc, #416]	; (80010c8 <display7SEG+0x30c>)
 8000f28:	f001 f87f 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4865      	ldr	r0, [pc, #404]	; (80010c8 <display7SEG+0x30c>)
 8000f32:	f001 f87a 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	4863      	ldr	r0, [pc, #396]	; (80010c8 <display7SEG+0x30c>)
 8000f3c:	f001 f875 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 5)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d122      	bne.n	8000f8c <display7SEG+0x1d0>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	485f      	ldr	r0, [pc, #380]	; (80010c8 <display7SEG+0x30c>)
 8000f4c:	f001 f86d 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2102      	movs	r1, #2
 8000f54:	485c      	ldr	r0, [pc, #368]	; (80010c8 <display7SEG+0x30c>)
 8000f56:	f001 f868 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	485a      	ldr	r0, [pc, #360]	; (80010c8 <display7SEG+0x30c>)
 8000f60:	f001 f863 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4857      	ldr	r0, [pc, #348]	; (80010c8 <display7SEG+0x30c>)
 8000f6a:	f001 f85e 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	4855      	ldr	r0, [pc, #340]	; (80010c8 <display7SEG+0x30c>)
 8000f74:	f001 f859 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4852      	ldr	r0, [pc, #328]	; (80010c8 <display7SEG+0x30c>)
 8000f7e:	f001 f854 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4850      	ldr	r0, [pc, #320]	; (80010c8 <display7SEG+0x30c>)
 8000f88:	f001 f84f 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 6)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d122      	bne.n	8000fd8 <display7SEG+0x21c>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	484c      	ldr	r0, [pc, #304]	; (80010c8 <display7SEG+0x30c>)
 8000f98:	f001 f847 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4849      	ldr	r0, [pc, #292]	; (80010c8 <display7SEG+0x30c>)
 8000fa2:	f001 f842 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4847      	ldr	r0, [pc, #284]	; (80010c8 <display7SEG+0x30c>)
 8000fac:	f001 f83d 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	4844      	ldr	r0, [pc, #272]	; (80010c8 <display7SEG+0x30c>)
 8000fb6:	f001 f838 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	4842      	ldr	r0, [pc, #264]	; (80010c8 <display7SEG+0x30c>)
 8000fc0:	f001 f833 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	483f      	ldr	r0, [pc, #252]	; (80010c8 <display7SEG+0x30c>)
 8000fca:	f001 f82e 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	483d      	ldr	r0, [pc, #244]	; (80010c8 <display7SEG+0x30c>)
 8000fd4:	f001 f829 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 7)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d122      	bne.n	8001024 <display7SEG+0x268>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4839      	ldr	r0, [pc, #228]	; (80010c8 <display7SEG+0x30c>)
 8000fe4:	f001 f821 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2102      	movs	r1, #2
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <display7SEG+0x30c>)
 8000fee:	f001 f81c 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4834      	ldr	r0, [pc, #208]	; (80010c8 <display7SEG+0x30c>)
 8000ff8:	f001 f817 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2108      	movs	r1, #8
 8001000:	4831      	ldr	r0, [pc, #196]	; (80010c8 <display7SEG+0x30c>)
 8001002:	f001 f812 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	482f      	ldr	r0, [pc, #188]	; (80010c8 <display7SEG+0x30c>)
 800100c:	f001 f80d 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2120      	movs	r1, #32
 8001014:	482c      	ldr	r0, [pc, #176]	; (80010c8 <display7SEG+0x30c>)
 8001016:	f001 f808 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	482a      	ldr	r0, [pc, #168]	; (80010c8 <display7SEG+0x30c>)
 8001020:	f001 f803 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 8)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b08      	cmp	r3, #8
 8001028:	d122      	bne.n	8001070 <display7SEG+0x2b4>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	4826      	ldr	r0, [pc, #152]	; (80010c8 <display7SEG+0x30c>)
 8001030:	f000 fffb 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2102      	movs	r1, #2
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <display7SEG+0x30c>)
 800103a:	f000 fff6 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2104      	movs	r1, #4
 8001042:	4821      	ldr	r0, [pc, #132]	; (80010c8 <display7SEG+0x30c>)
 8001044:	f000 fff1 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	481e      	ldr	r0, [pc, #120]	; (80010c8 <display7SEG+0x30c>)
 800104e:	f000 ffec 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	481c      	ldr	r0, [pc, #112]	; (80010c8 <display7SEG+0x30c>)
 8001058:	f000 ffe7 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2120      	movs	r1, #32
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <display7SEG+0x30c>)
 8001062:	f000 ffe2 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	4817      	ldr	r0, [pc, #92]	; (80010c8 <display7SEG+0x30c>)
 800106c:	f000 ffdd 	bl	800202a <HAL_GPIO_WritePin>
   	  }
   	  if(num == 9)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b09      	cmp	r3, #9
 8001074:	d123      	bne.n	80010be <display7SEG+0x302>
   	  {
   		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin,GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <display7SEG+0x30c>)
 800107c:	f000 ffd5 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin,GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <display7SEG+0x30c>)
 8001086:	f000 ffd0 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin,GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2104      	movs	r1, #4
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <display7SEG+0x30c>)
 8001090:	f000 ffcb 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2108      	movs	r1, #8
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <display7SEG+0x30c>)
 800109a:	f000 ffc6 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin,GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2110      	movs	r1, #16
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <display7SEG+0x30c>)
 80010a4:	f000 ffc1 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin,GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2120      	movs	r1, #32
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <display7SEG+0x30c>)
 80010ae:	f000 ffbc 	bl	800202a <HAL_GPIO_WritePin>
   		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin,GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <display7SEG+0x30c>)
 80010b8:	f000 ffb7 	bl	800202a <HAL_GPIO_WritePin>
 80010bc:	e000      	b.n	80010c0 <display7SEG+0x304>
   	  }
   	  else
   	  {
   		  return;
 80010be:	bf00      	nop
   	  }

    }
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010c00 	.word	0x40010c00

080010cc <display7SEG1>:

  void display7SEG1(int num)
  {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	  if(num == 0)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d128      	bne.n	800112c <display7SEG1+0x60>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	48d2      	ldr	r0, [pc, #840]	; (8001428 <display7SEG1+0x35c>)
 80010e0:	f000 ffa3 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	48cf      	ldr	r0, [pc, #828]	; (8001428 <display7SEG1+0x35c>)
 80010ec:	f000 ff9d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	48cc      	ldr	r0, [pc, #816]	; (8001428 <display7SEG1+0x35c>)
 80010f8:	f000 ff97 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	48c9      	ldr	r0, [pc, #804]	; (8001428 <display7SEG1+0x35c>)
 8001104:	f000 ff91 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110e:	48c6      	ldr	r0, [pc, #792]	; (8001428 <display7SEG1+0x35c>)
 8001110:	f000 ff8b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	48c3      	ldr	r0, [pc, #780]	; (8001428 <display7SEG1+0x35c>)
 800111c:	f000 ff85 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	48c0      	ldr	r0, [pc, #768]	; (8001428 <display7SEG1+0x35c>)
 8001128:	f000 ff7f 	bl	800202a <HAL_GPIO_WritePin>

	  }
	  if(num == 1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d128      	bne.n	8001184 <display7SEG1+0xb8>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	48bc      	ldr	r0, [pc, #752]	; (8001428 <display7SEG1+0x35c>)
 8001138:	f000 ff77 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001142:	48b9      	ldr	r0, [pc, #740]	; (8001428 <display7SEG1+0x35c>)
 8001144:	f000 ff71 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	48b6      	ldr	r0, [pc, #728]	; (8001428 <display7SEG1+0x35c>)
 8001150:	f000 ff6b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	48b3      	ldr	r0, [pc, #716]	; (8001428 <display7SEG1+0x35c>)
 800115c:	f000 ff65 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	48b0      	ldr	r0, [pc, #704]	; (8001428 <display7SEG1+0x35c>)
 8001168:	f000 ff5f 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	48ad      	ldr	r0, [pc, #692]	; (8001428 <display7SEG1+0x35c>)
 8001174:	f000 ff59 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117e:	48aa      	ldr	r0, [pc, #680]	; (8001428 <display7SEG1+0x35c>)
 8001180:	f000 ff53 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d128      	bne.n	80011dc <display7SEG1+0x110>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	48a6      	ldr	r0, [pc, #664]	; (8001428 <display7SEG1+0x35c>)
 8001190:	f000 ff4b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119a:	48a3      	ldr	r0, [pc, #652]	; (8001428 <display7SEG1+0x35c>)
 800119c:	f000 ff45 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	48a0      	ldr	r0, [pc, #640]	; (8001428 <display7SEG1+0x35c>)
 80011a8:	f000 ff3f 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b2:	489d      	ldr	r0, [pc, #628]	; (8001428 <display7SEG1+0x35c>)
 80011b4:	f000 ff39 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011be:	489a      	ldr	r0, [pc, #616]	; (8001428 <display7SEG1+0x35c>)
 80011c0:	f000 ff33 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	4897      	ldr	r0, [pc, #604]	; (8001428 <display7SEG1+0x35c>)
 80011cc:	f000 ff2d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d6:	4894      	ldr	r0, [pc, #592]	; (8001428 <display7SEG1+0x35c>)
 80011d8:	f000 ff27 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d128      	bne.n	8001234 <display7SEG1+0x168>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	4890      	ldr	r0, [pc, #576]	; (8001428 <display7SEG1+0x35c>)
 80011e8:	f000 ff1f 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f2:	488d      	ldr	r0, [pc, #564]	; (8001428 <display7SEG1+0x35c>)
 80011f4:	f000 ff19 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	488a      	ldr	r0, [pc, #552]	; (8001428 <display7SEG1+0x35c>)
 8001200:	f000 ff13 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120a:	4887      	ldr	r0, [pc, #540]	; (8001428 <display7SEG1+0x35c>)
 800120c:	f000 ff0d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4884      	ldr	r0, [pc, #528]	; (8001428 <display7SEG1+0x35c>)
 8001218:	f000 ff07 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4881      	ldr	r0, [pc, #516]	; (8001428 <display7SEG1+0x35c>)
 8001224:	f000 ff01 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	487e      	ldr	r0, [pc, #504]	; (8001428 <display7SEG1+0x35c>)
 8001230:	f000 fefb 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d128      	bne.n	800128c <display7SEG1+0x1c0>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	487a      	ldr	r0, [pc, #488]	; (8001428 <display7SEG1+0x35c>)
 8001240:	f000 fef3 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124a:	4877      	ldr	r0, [pc, #476]	; (8001428 <display7SEG1+0x35c>)
 800124c:	f000 feed 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4874      	ldr	r0, [pc, #464]	; (8001428 <display7SEG1+0x35c>)
 8001258:	f000 fee7 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	4871      	ldr	r0, [pc, #452]	; (8001428 <display7SEG1+0x35c>)
 8001264:	f000 fee1 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126e:	486e      	ldr	r0, [pc, #440]	; (8001428 <display7SEG1+0x35c>)
 8001270:	f000 fedb 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	486b      	ldr	r0, [pc, #428]	; (8001428 <display7SEG1+0x35c>)
 800127c:	f000 fed5 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4868      	ldr	r0, [pc, #416]	; (8001428 <display7SEG1+0x35c>)
 8001288:	f000 fecf 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 5)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d128      	bne.n	80012e4 <display7SEG1+0x218>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	4864      	ldr	r0, [pc, #400]	; (8001428 <display7SEG1+0x35c>)
 8001298:	f000 fec7 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4861      	ldr	r0, [pc, #388]	; (8001428 <display7SEG1+0x35c>)
 80012a4:	f000 fec1 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	485e      	ldr	r0, [pc, #376]	; (8001428 <display7SEG1+0x35c>)
 80012b0:	f000 febb 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	485b      	ldr	r0, [pc, #364]	; (8001428 <display7SEG1+0x35c>)
 80012bc:	f000 feb5 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c6:	4858      	ldr	r0, [pc, #352]	; (8001428 <display7SEG1+0x35c>)
 80012c8:	f000 feaf 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4855      	ldr	r0, [pc, #340]	; (8001428 <display7SEG1+0x35c>)
 80012d4:	f000 fea9 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4852      	ldr	r0, [pc, #328]	; (8001428 <display7SEG1+0x35c>)
 80012e0:	f000 fea3 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 6)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d128      	bne.n	800133c <display7SEG1+0x270>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	484e      	ldr	r0, [pc, #312]	; (8001428 <display7SEG1+0x35c>)
 80012f0:	f000 fe9b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	484b      	ldr	r0, [pc, #300]	; (8001428 <display7SEG1+0x35c>)
 80012fc:	f000 fe95 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001306:	4848      	ldr	r0, [pc, #288]	; (8001428 <display7SEG1+0x35c>)
 8001308:	f000 fe8f 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001312:	4845      	ldr	r0, [pc, #276]	; (8001428 <display7SEG1+0x35c>)
 8001314:	f000 fe89 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	4842      	ldr	r0, [pc, #264]	; (8001428 <display7SEG1+0x35c>)
 8001320:	f000 fe83 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132a:	483f      	ldr	r0, [pc, #252]	; (8001428 <display7SEG1+0x35c>)
 800132c:	f000 fe7d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001336:	483c      	ldr	r0, [pc, #240]	; (8001428 <display7SEG1+0x35c>)
 8001338:	f000 fe77 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 7)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d128      	bne.n	8001394 <display7SEG1+0x2c8>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	4838      	ldr	r0, [pc, #224]	; (8001428 <display7SEG1+0x35c>)
 8001348:	f000 fe6f 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <display7SEG1+0x35c>)
 8001354:	f000 fe69 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135e:	4832      	ldr	r0, [pc, #200]	; (8001428 <display7SEG1+0x35c>)
 8001360:	f000 fe63 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	482f      	ldr	r0, [pc, #188]	; (8001428 <display7SEG1+0x35c>)
 800136c:	f000 fe5d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001376:	482c      	ldr	r0, [pc, #176]	; (8001428 <display7SEG1+0x35c>)
 8001378:	f000 fe57 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <display7SEG1+0x35c>)
 8001384:	f000 fe51 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <display7SEG1+0x35c>)
 8001390:	f000 fe4b 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 8)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d128      	bne.n	80013ec <display7SEG1+0x320>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4822      	ldr	r0, [pc, #136]	; (8001428 <display7SEG1+0x35c>)
 80013a0:	f000 fe43 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013aa:	481f      	ldr	r0, [pc, #124]	; (8001428 <display7SEG1+0x35c>)
 80013ac:	f000 fe3d 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <display7SEG1+0x35c>)
 80013b8:	f000 fe37 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <display7SEG1+0x35c>)
 80013c4:	f000 fe31 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <display7SEG1+0x35c>)
 80013d0:	f000 fe2b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013da:	4813      	ldr	r0, [pc, #76]	; (8001428 <display7SEG1+0x35c>)
 80013dc:	f000 fe25 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <display7SEG1+0x35c>)
 80013e8:	f000 fe1f 	bl	800202a <HAL_GPIO_WritePin>
	  }
	  if(num == 9)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	d12c      	bne.n	800144c <display7SEG1+0x380>
	  {
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin,GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <display7SEG1+0x35c>)
 80013f8:	f000 fe17 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin,GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <display7SEG1+0x35c>)
 8001404:	f000 fe11 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin,GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <display7SEG1+0x35c>)
 8001410:	f000 fe0b 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin,GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <display7SEG1+0x35c>)
 800141c:	f000 fe05 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin,GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001426:	e001      	b.n	800142c <display7SEG1+0x360>
 8001428:	40010c00 	.word	0x40010c00
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <display7SEG1+0x388>)
 800142e:	f000 fdfc 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin,GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <display7SEG1+0x388>)
 800143a:	f000 fdf6 	bl	800202a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin,GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <display7SEG1+0x388>)
 8001446:	f000 fdf0 	bl	800202a <HAL_GPIO_WritePin>
 800144a:	e000      	b.n	800144e <display7SEG1+0x382>
	  }
	  else
	  {
		  return;
 800144c:	bf00      	nop
	  }

  }
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010c00 	.word	0x40010c00

08001458 <update7SEG>:

   int led_buffer [2] = {0,0};
   void update7SEG(int index)
   {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
   	switch (index){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <update7SEG+0x16>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d012      	beq.n	8001492 <update7SEG+0x3a>
   		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);

   		display7SEG(led_buffer[index]);
   		break;
   	default:
   	    break;
 800146c:	e023      	b.n	80014b6 <update7SEG+0x5e>
   		   HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2108      	movs	r1, #8
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <update7SEG+0x68>)
 8001474:	f000 fdd9 	bl	800202a <HAL_GPIO_WritePin>
   		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2110      	movs	r1, #16
 800147c:	4810      	ldr	r0, [pc, #64]	; (80014c0 <update7SEG+0x68>)
 800147e:	f000 fdd4 	bl	800202a <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <update7SEG+0x6c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc96 	bl	8000dbc <display7SEG>
   		break;
 8001490:	e011      	b.n	80014b6 <update7SEG+0x5e>
   		   HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2108      	movs	r1, #8
 8001496:	480a      	ldr	r0, [pc, #40]	; (80014c0 <update7SEG+0x68>)
 8001498:	f000 fdc7 	bl	800202a <HAL_GPIO_WritePin>
   		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2110      	movs	r1, #16
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <update7SEG+0x68>)
 80014a2:	f000 fdc2 	bl	800202a <HAL_GPIO_WritePin>
   		display7SEG(led_buffer[index]);
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <update7SEG+0x6c>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc84 	bl	8000dbc <display7SEG>
   		break;
 80014b4:	bf00      	nop
   	}
   }
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010800 	.word	0x40010800
 80014c4:	2000008c 	.word	0x2000008c

080014c8 <updateLedBuffer>:
   void updateLedBuffer(int mode) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
       led_buffer[0] = mode / 10;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <updateLedBuffer+0x40>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1092      	asrs	r2, r2, #2
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <updateLedBuffer+0x44>)
 80014e0:	6013      	str	r3, [r2, #0]
       led_buffer[1] = mode % 10;
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <updateLedBuffer+0x40>)
 80014e6:	fb83 2301 	smull	r2, r3, r3, r1
 80014ea:	109a      	asrs	r2, r3, #2
 80014ec:	17cb      	asrs	r3, r1, #31
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	1aca      	subs	r2, r1, r3
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <updateLedBuffer+0x44>)
 80014fc:	605a      	str	r2, [r3, #4]
   }
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	66666667 	.word	0x66666667
 800150c:	2000008c 	.word	0x2000008c

08001510 <update7SEG_t>:


   //TIME LED
   int led_buffer_t [2] = {0,0};
   void update7SEG_t(int index)
   {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
   	switch (index){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <update7SEG_t+0x16>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d012      	beq.n	800154a <update7SEG_t+0x3a>
   		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);

   		display7SEG1(led_buffer_t[index]);
   		break;
   	default:
   	    break;
 8001524:	e023      	b.n	800156e <update7SEG_t+0x5e>
   		   HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2102      	movs	r1, #2
 800152a:	4813      	ldr	r0, [pc, #76]	; (8001578 <update7SEG_t+0x68>)
 800152c:	f000 fd7d 	bl	800202a <HAL_GPIO_WritePin>
   		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2104      	movs	r1, #4
 8001534:	4810      	ldr	r0, [pc, #64]	; (8001578 <update7SEG_t+0x68>)
 8001536:	f000 fd78 	bl	800202a <HAL_GPIO_WritePin>
            display7SEG1(led_buffer_t[index]);
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <update7SEG_t+0x6c>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fdc2 	bl	80010cc <display7SEG1>
   		break;
 8001548:	e011      	b.n	800156e <update7SEG_t+0x5e>
   		   HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2102      	movs	r1, #2
 800154e:	480a      	ldr	r0, [pc, #40]	; (8001578 <update7SEG_t+0x68>)
 8001550:	f000 fd6b 	bl	800202a <HAL_GPIO_WritePin>
   		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <update7SEG_t+0x68>)
 800155a:	f000 fd66 	bl	800202a <HAL_GPIO_WritePin>
   		display7SEG1(led_buffer_t[index]);
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <update7SEG_t+0x6c>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fdb0 	bl	80010cc <display7SEG1>
   		break;
 800156c:	bf00      	nop
   	}
   }
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010800 	.word	0x40010800
 800157c:	20000094 	.word	0x20000094

08001580 <updateLedBuffer_t>:
   void updateLedBuffer_t(int time) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
       led_buffer_t[0] = time / 10;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <updateLedBuffer_t+0x40>)
 800158c:	fb82 1203 	smull	r1, r2, r2, r3
 8001590:	1092      	asrs	r2, r2, #2
 8001592:	17db      	asrs	r3, r3, #31
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <updateLedBuffer_t+0x44>)
 8001598:	6013      	str	r3, [r2, #0]
       led_buffer_t[1] = time % 10;
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <updateLedBuffer_t+0x40>)
 800159e:	fb83 2301 	smull	r2, r3, r3, r1
 80015a2:	109a      	asrs	r2, r3, #2
 80015a4:	17cb      	asrs	r3, r1, #31
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	1aca      	subs	r2, r1, r3
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <updateLedBuffer_t+0x44>)
 80015b4:	605a      	str	r2, [r3, #4]
   }
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	66666667 	.word	0x66666667
 80015c4:	20000094 	.word	0x20000094

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015cc:	f000 fa2c 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d0:	f000 f814 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d4:	f000 f89a 	bl	800170c <MX_GPIO_Init>
  MX_TIM2_Init();
 80015d8:	f000 f84c 	bl	8001674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <main+0x2c>)
 80015de:	f001 f981 	bl	80028e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

status = INIT;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <main+0x30>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  fsm_automatic_run();
 80015e8:	f7fe fee6 	bl	80003b8 <fsm_automatic_run>
	  fsm_manual_run();
 80015ec:	f7ff fa3a 	bl	8000a64 <fsm_manual_run>
	  fsm_automatic_run();
 80015f0:	e7fa      	b.n	80015e8 <main+0x20>
 80015f2:	bf00      	nop
 80015f4:	200000c4 	.word	0x200000c4
 80015f8:	20000088 	.word	0x20000088

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fd1a 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2310      	movs	r3, #16
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd2a 	bl	800208c <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800163e:	f000 f8e3 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f000 ff96 	bl	800258c <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001666:	f000 f8cf 	bl	8001808 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3740      	adds	r7, #64	; 0x40
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_TIM2_Init+0x94>)
 8001692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_TIM2_Init+0x94>)
 800169a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800169e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_TIM2_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_TIM2_Init+0x94>)
 80016a8:	2209      	movs	r2, #9
 80016aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_TIM2_Init+0x94>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_TIM2_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_TIM2_Init+0x94>)
 80016ba:	f001 f8c3 	bl	8002844 <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016c4:	f000 f8a0 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_TIM2_Init+0x94>)
 80016d6:	f001 fa41 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016e0:	f000 f892 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_TIM2_Init+0x94>)
 80016f2:	f001 fc19 	bl	8002f28 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f000 f884 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000c4 	.word	0x200000c4

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <MX_GPIO_Init+0xd4>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <MX_GPIO_Init+0xd4>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_GPIO_Init+0xd4>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_GPIO_Init+0xd4>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <MX_GPIO_Init+0xd4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_GPIO_Init+0xd4>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_GPIO_Init+0xd4>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <MX_GPIO_Init+0xd4>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_GPIO_Init+0xd4>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN3_Pin|EN0_Pin|EN1_Pin
 8001768:	2200      	movs	r2, #0
 800176a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800176e:	481d      	ldr	r0, [pc, #116]	; (80017e4 <MX_GPIO_Init+0xd8>)
 8001770:	f000 fc5b 	bl	800202a <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d1_Pin
 8001774:	2200      	movs	r2, #0
 8001776:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800177a:	481b      	ldr	r0, [pc, #108]	; (80017e8 <MX_GPIO_Init+0xdc>)
 800177c:	f000 fc55 	bl	800202a <HAL_GPIO_WritePin>
                          |e1_Pin|f1_Pin|g1_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001780:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	4815      	ldr	r0, [pc, #84]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001796:	f000 fab7 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin EN3_Pin EN0_Pin EN1_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|EN3_Pin|EN0_Pin|EN1_Pin
 800179a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800179e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_GPIO_Init+0xd8>)
 80017b4:	f000 faa8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin d_Pin
                           e_Pin f_Pin g_Pin a1_Pin
                           b1_Pin c1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d1_Pin
 80017b8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80017bc:	613b      	str	r3, [r7, #16]
                          |e1_Pin|f1_Pin|g1_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0xdc>)
 80017d2:	f000 fa99 	bl	8001d08 <HAL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40011000 	.word	0x40011000

080017f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	timerRun();
 80017f8:	f000 f820 	bl	800183c <timerRun>
	getKeyInput();
 80017fc:	f7fe fd00 	bl	8000200 <getKeyInput>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
void setTimer1(int duration){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <setTimer1+0x20>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <setTimer1+0x24>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000009c 	.word	0x2000009c
 8001838:	200000a0 	.word	0x200000a0

0800183c <timerRun>:
void timerRun(){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <timerRun+0x4c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	dd0b      	ble.n	8001860 <timerRun+0x24>
		timer1_counter --;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <timerRun+0x4c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3b01      	subs	r3, #1
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <timerRun+0x4c>)
 8001850:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <timerRun+0x4c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	dc02      	bgt.n	8001860 <timerRun+0x24>
			timer1_flag = 1;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <timerRun+0x50>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <timerRun+0x54>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd0b      	ble.n	8001880 <timerRun+0x44>
			timer2_counter --;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <timerRun+0x54>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <timerRun+0x54>)
 8001870:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <timerRun+0x54>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	dc02      	bgt.n	8001880 <timerRun+0x44>
				timer2_flag = 1;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <timerRun+0x58>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	2000009c 	.word	0x2000009c
 800188c:	200000a0 	.word	0x200000a0
 8001890:	200000a4 	.word	0x200000a4
 8001894:	200000a8 	.word	0x200000a8

08001898 <setTimer2>:



void setTimer2(int duration){
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <setTimer2+0x20>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <setTimer2+0x24>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200000a4 	.word	0x200000a4
 80018bc:	200000a8 	.word	0x200000a8

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_MspInit+0x5c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_MspInit+0x5c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_MspInit+0x5c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_MspInit+0x5c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_MspInit+0x5c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_MspInit+0x60>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_MspInit+0x60>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d113      	bne.n	800195e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f000 f9a1 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001958:	201c      	movs	r0, #28
 800195a:	f000 f9ba 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f87f 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM2_IRQHandler+0x10>)
 80019c2:	f000 ffdb 	bl	800297c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000c4 	.word	0x200000c4

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fff8 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	; (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f001 faf9 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fddd 	bl	80015c8 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a18:	0800309c 	.word	0x0800309c
  ldr r2, =_sbss
 8001a1c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a20:	20000110 	.word	0x20000110

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f923 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff ff3c 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f93b 	bl	8001cee <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f903 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000004c 	.word	0x2000004c
 8001aac:	20000054 	.word	0x20000054
 8001ab0:	20000050 	.word	0x20000050

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000054 	.word	0x20000054
 8001ad4:	2000010c 	.word	0x2000010c

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	2000010c 	.word	0x2000010c

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <__NVIC_EnableIRQ+0x34>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff90 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff2d 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff42 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff35 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e148      	b.n	8001fae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8137 	bne.w	8001fa8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4aa3      	ldr	r2, [pc, #652]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d44:	4aa1      	ldr	r2, [pc, #644]	; (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d875      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d4a:	4aa1      	ldr	r2, [pc, #644]	; (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d058      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d50:	4a9f      	ldr	r2, [pc, #636]	; (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d86f      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d56:	4a9f      	ldr	r2, [pc, #636]	; (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d052      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a9d      	ldr	r2, [pc, #628]	; (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d869      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d62:	4a9d      	ldr	r2, [pc, #628]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d04c      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d68:	4a9b      	ldr	r2, [pc, #620]	; (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d863      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d046      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d74:	4a99      	ldr	r2, [pc, #612]	; (8001fdc <HAL_GPIO_Init+0x2d4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d85d      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d82a      	bhi.n	8001dd4 <HAL_GPIO_Init+0xcc>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d859      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <HAL_GPIO_Init+0x80>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001def 	.word	0x08001def
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e37 	.word	0x08001e37
 8001d9c:	08001e37 	.word	0x08001e37
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001e37 	.word	0x08001e37
 8001da8:	08001e37 	.word	0x08001e37
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e37 	.word	0x08001e37
 8001dc8:	08001e37 	.word	0x08001e37
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001df9 	.word	0x08001df9
 8001dd4:	4a82      	ldr	r2, [pc, #520]	; (8001fe0 <HAL_GPIO_Init+0x2d8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e029      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e024      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01f      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e01a      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e013      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e009      	b.n	8001e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          break;
 8001e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d801      	bhi.n	8001e42 <HAL_GPIO_Init+0x13a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_Init+0x13e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d802      	bhi.n	8001e54 <HAL_GPIO_Init+0x14c>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x152>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3b08      	subs	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	210f      	movs	r1, #15
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8090 	beq.w	8001fa8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e88:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_GPIO_Init+0x2dc>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea0:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_GPIO_Init+0x2e0>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1d8>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	493b      	ldr	r1, [pc, #236]	; (8001fe8 <HAL_GPIO_Init+0x2e0>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4933      	ldr	r1, [pc, #204]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4929      	ldr	r1, [pc, #164]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4923      	ldr	r1, [pc, #140]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491f      	ldr	r1, [pc, #124]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4919      	ldr	r1, [pc, #100]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4915      	ldr	r1, [pc, #84]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3301      	adds	r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f aeaf 	bne.w	8001d1c <HAL_GPIO_Init+0x14>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	372c      	adds	r7, #44	; 0x2c
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	10320000 	.word	0x10320000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10220000 	.word	0x10220000
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10120000 	.word	0x10120000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e001      	b.n	800201e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203a:	787b      	ldrb	r3, [r7, #1]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002046:	e003      	b.n	8002050 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43d9      	mvns	r1, r3
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	400b      	ands	r3, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e26c      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d112      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d10b      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x12c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d168      	bne.n	80021b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e246      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x76>
 80020f4:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7f      	ldr	r2, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e02e      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0xbc>
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fcb6 	bl	8001ad8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fcb2 	bl	8001ad8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1fa      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xe4>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fca2 	bl	8001ad8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fc9e 	bl	8001ad8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1e6      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x10c>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1ba      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4939      	ldr	r1, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fc57 	bl	8001ad8 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff fc53 	bl	8001ad8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e19b      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff fc36 	bl	8001ad8 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7ff fc32 	bl	8001ad8 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e17a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03a      	beq.n	8002310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fc16 	bl	8001ad8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff fc12 	bl	8001ad8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e15a      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 fa9a 	bl	8002808 <RCC_Delay>
 80022d4:	e01c      	b.n	8002310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fbfc 	bl	8001ad8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff fbf8 	bl	8001ad8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d908      	bls.n	8002304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e140      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	42420000 	.word	0x42420000
 8002300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e9      	bne.n	80022e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a6 	beq.w	800246a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b97      	ldr	r3, [pc, #604]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b94      	ldr	r3, [pc, #592]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a93      	ldr	r2, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b91      	ldr	r3, [pc, #580]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a8a      	ldr	r2, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7ff fbb9 	bl	8001ad8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7ff fbb5 	bl	8001ad8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0fd      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e02d      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	e01c      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x356>
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a66      	ldr	r2, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a63      	ldr	r2, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fb69 	bl	8001ad8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff fb65 	bl	8001ad8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ab      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RCC_OscConfig+0x37e>
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb53 	bl	8001ad8 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff fb4f 	bl	8001ad8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e095      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b48      	ldr	r3, [pc, #288]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8081 	beq.w	8002576 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d061      	beq.n	8002544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d146      	bne.n	8002516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fb23 	bl	8001ad8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff fb1f 	bl	8001ad8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e067      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	492d      	ldr	r1, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a19      	ldr	r1, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	430b      	orrs	r3, r1
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff faf3 	bl	8001ad8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff faef 	bl	8001ad8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e037      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
 8002514:	e02f      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_OscConfig+0x4fc>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fadc 	bl	8001ad8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff fad8 	bl	8001ad8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e020      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x498>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	42420060 	.word	0x42420060

0800258c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d0      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d910      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4965      	ldr	r1, [pc, #404]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b8      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800260a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	494d      	ldr	r1, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d040      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e073      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06b      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4936      	ldr	r1, [pc, #216]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff fa2c 	bl	8001ad8 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff fa28 	bl	8001ad8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e053      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d210      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4922      	ldr	r1, [pc, #136]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e032      	b.n	8002742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4916      	ldr	r1, [pc, #88]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800271a:	f000 f821 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800271e:	4602      	mov	r2, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f98a 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000
 8002750:	40021000 	.word	0x40021000
 8002754:	08003070 	.word	0x08003070
 8002758:	2000004c 	.word	0x2000004c
 800275c:	20000050 	.word	0x20000050

08002760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x30>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x36>
 800278e:	e027      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002792:	613b      	str	r3, [r7, #16]
      break;
 8002794:	e027      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0c9b      	lsrs	r3, r3, #18
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d010      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0c5b      	lsrs	r3, r3, #17
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	fb02 f203 	mul.w	r2, r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e004      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	613b      	str	r3, [r7, #16]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027e2:	613b      	str	r3, [r7, #16]
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	693b      	ldr	r3, [r7, #16]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	08003080 	.word	0x08003080
 8002800:	08003090 	.word	0x08003090
 8002804:	003d0900 	.word	0x003d0900

08002808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RCC_Delay+0x34>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <RCC_Delay+0x38>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002824:	bf00      	nop
  }
  while (Delay --);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60fa      	str	r2, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <RCC_Delay+0x1c>
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	2000004c 	.word	0x2000004c
 8002840:	10624dd3 	.word	0x10624dd3

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e041      	b.n	80028da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff f85a 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 fa56 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e035      	b.n	8002968 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_TIM_Base_Start_IT+0x90>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x4e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d004      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x4e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <HAL_TIM_Base_Start_IT+0x94>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d111      	bne.n	8002956 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b06      	cmp	r3, #6
 8002942:	d010      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	e007      	b.n	8002966 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400

0800297c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d020      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0202 	mvn.w	r2, #2
 80029b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f998 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f98b 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f99a 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d020      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0204 	mvn.w	r2, #4
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f972 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f965 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f974 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d020      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0208 	mvn.w	r2, #8
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f94c 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f93f 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f94e 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d020      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0210 	mvn.w	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f926 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f919 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f928 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0201 	mvn.w	r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fe84 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa6f 	bl	8002fea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8f8 	bl	8002d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0220 	mvn.w	r2, #32
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa42 	bl	8002fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_ConfigClockSource+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0b4      	b.n	8002ce2 <HAL_TIM_ConfigClockSource+0x186>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d03e      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0xd4>
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	f200 8087 	bhi.w	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	f000 8086 	beq.w	8002cce <HAL_TIM_ConfigClockSource+0x172>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d87f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d01a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xa6>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d87b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d050      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x11a>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d877      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d03c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xfa>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d873      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d058      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x13a>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d86f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d064      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d86b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d060      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d867      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d05a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c00:	e062      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f000 f96a 	bl	8002eea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	609a      	str	r2, [r3, #8]
      break;
 8002c2e:	e04f      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f000 f953 	bl	8002eea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e03c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f8ca 	bl	8002dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f921 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e02c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 f8e8 	bl	8002e58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2160      	movs	r1, #96	; 0x60
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f911 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e01c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 f8aa 	bl	8002dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f901 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e00c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 f8f8 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <TIM_Base_SetConfig+0xc0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <TIM_Base_SetConfig+0xc4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <TIM_Base_SetConfig+0xc0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <TIM_Base_SetConfig+0xc4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <TIM_Base_SetConfig+0xc0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]
  }
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400

08002dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 030a 	bic.w	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	031b      	lsls	r3, r3, #12
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	621a      	str	r2, [r3, #32]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f043 0307 	orr.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	609a      	str	r2, [r3, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e041      	b.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10c      	bne.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400

08002fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	2600      	movs	r6, #0
 8003000:	4d0c      	ldr	r5, [pc, #48]	; (8003034 <__libc_init_array+0x38>)
 8003002:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	f000 f822 	bl	8003054 <_init>
 8003010:	2600      	movs	r6, #0
 8003012:	4d0a      	ldr	r5, [pc, #40]	; (800303c <__libc_init_array+0x40>)
 8003014:	4c0a      	ldr	r4, [pc, #40]	; (8003040 <__libc_init_array+0x44>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08003094 	.word	0x08003094
 8003038:	08003094 	.word	0x08003094
 800303c:	08003094 	.word	0x08003094
 8003040:	08003098 	.word	0x08003098

08003044 <memset>:
 8003044:	4603      	mov	r3, r0
 8003046:	4402      	add	r2, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
